name: Testing

on:
  push:
    branches: ['main', 'develop']
    paths-ignore: ['docs/**', 'docker/**', '*', '!pyproject.toml']
  pull_request:
    types: [opened, synchronize]
    paths-ignore: ['docs/**', 'docker/**', '*', '!pyproject.toml']

jobs:
  testing:
    runs-on: ${{ matrix.os }}
    env:
      ZENML_DEBUG: 1
      ZENML_ANALYTICS_OPT_IN: false
      PYTHONIOENCODING: 'utf-8'
    # Exit if its a commit from Gitbook
    if: ${{ ! startsWith(github.event.head_commit.message, 'GitBook:') }}

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Linux System Dependencies
        if: runner.os=='Linux'
        run: sudo apt install graphviz

      - name: Install MacOS System Dependencies
        if: runner.os=='macOS'
        run: brew install graphviz

      - name: Install Windows System Dependencies
        if: runner.os=='Windows'
        run: choco install graphviz

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Delete error-causing bash
        if: ${{ matrix.os == 'windows-latest' }}
        run: rm.exe "C:/WINDOWS/system32/bash.EXE"

      - name: Set path to bash for example runner
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "SHELL_EXECUTABLE=C:\Program Files\Git\bin\bash.exe" >> $GITHUB_ENV

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.6
        with:
          path: .venv
          key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.github/workflows/testing.yml') }}

      - name: Install Project
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          source $VENV
          zenml integration install airflow -f
          zenml integration install pytorch -f
          zenml integration install mlflow -f
          zenml integration install gcp -f
          zenml integration install kubeflow -f
          zenml integration install azure -f
          pip install click~=8.0.3

      - name: Setup tmate session
        if: ${{ matrix.os == 'macos-latest' }}
        uses: mxschmitt/action-tmate@v3

      - name: Check Python Env ahead of tests
        run: |
          source $VENV
          zenml integration list
          pip list

      - name: Test
        run: |
          source $VENV
          zenml integration install kubeflow -f
          bash scripts/test-coverage-xml.sh

      - name: Verify Python Env unaffected
        run: |
          source $VENV
          zenml integration list

      - name: Upload coverage
        # only do it for python 3.8, we don't need to do it for every version
        if: ${{ matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v2
