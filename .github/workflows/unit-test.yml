name: Unit Test & Upload Coverage

on:
  workflow_call:
    inputs:
      os:
        description: 'OS'
        type: string
        required: true
      python-version:
        description: 'Python version'
        type: string
        required: true
      enable_tmate:
        description: 'Enable tmate session for debugging'
        type: string
        required: false
        default: "never"

  workflow_dispatch:
    inputs:
      os:
        description: 'OS'
        type: choice
        options: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
        required: false
        default: 'ubuntu-latest'
      python-version:
        description: 'Python version'
        type: choice
        options:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
        required: false
        default: '3.8'
      enable_tmate:
        description: 'Enable tmate session for debugging'
        type: choice
        options:
          - 'no'
          - 'on-failure'
          - 'always'
          - 'before-tests'
        required: false
        default: 'no'

jobs:
  unittest:
    name: unittest
    runs-on: ${{ inputs.os }}
    env:
      ZENML_DEBUG: 1
      ZENML_ANALYTICS_OPT_IN: false
      PYTHONIOENCODING: "utf-8"
      # on MAC OS, we need to set this environment variable
      # to fix problems with the fork() calls (see this thread
      # for more information: http://sealiesoftware.com/blog/archive/2017/6/5/Objective-C_and_fork_in_macOS_1013.html)
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: "YES"
    # Exit if it's a commit from Gitbook
    if: ${{ ! startsWith(github.event.head_commit.message, 'GitBook:') }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        uses: ./.github/actions/setup_environment
        with:
          cache_version: ${{ secrets.GH_ACTIONS_CACHE_KEY }}
          python-version: ${{ inputs.python-version }}
          os: ${{ inputs.os }}

      - name: Install Prerequisites - Stage 1
        run: |
          source $VENV
          zenml integration export-requirements --output-file requirements.txt kubeflow s3 gcp azure vault pillow evidently deepchecks great_expectations huggingface lightgbm neural_prophet pytorch tensorflow whylogs xgboost mlflow neptune
          pip install -r requirements.txt
          rm requirements.txt
          pip install click~=8.0.3
          # Version 4.2.1 raises: AttributeError: type object 'Draft7Validator' has no attribute 'FORMAT_CHECKER'
          pip install altair==4.2.0

      # ADD BACK IN IF TESTING KSERVE
      # - name: Install Prerequisites - Stage 2
      #   run: |
      #     source $VENV
      #     # install kserve on python < 3.10
      #     # kserve is not compatible with Python 3.10 yet
      #     zenml integration export-requirements --output-file requirements.txt kserve
      #     pip install -r requirements.txt
      #     rm requirements.txt
      #   if: ${{ inputs.python-version != '3.10' }}

      - name: Setup tmate session before tests
        if: ${{ inputs.enable_tmate == 'before-tests' }}
        uses: mxschmitt/action-tmate@v3

      - name: Test
        run: |
          source $VENV
          bash scripts/test-coverage-xml.sh unit

      - name: Upload coverage
        # only do it for python 3.8, we don't need to do it for every version
        if: ${{ inputs.python-version == '3.8' && inputs.os == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v2

      - name: Setup tmate session after tests
        if: ${{ inputs.enable_tmate == 'always' || (inputs.enable_tmate == 'on-failure' && failure()) }}
        uses: mxschmitt/action-tmate@v3