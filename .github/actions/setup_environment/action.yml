name: "Install ZenML"
description: "Install ZenML, most integrations, loads/uploads cached venv and pip download cache if applicable"
inputs:
  cache_version:
    description: 'Value gets appended to the cache key and will therefore invalidate the cache if it changes'
    required: true
  python-version:
    description: 'Python version'
    type: string
    required: true
  os:
    description: 'OS'
    type: string
    required: true
  install_integrations:
    description: 'Install ZenML integrations'
    type: string
    required: false
    default: 'yes'

runs:
  using: "composite"
  steps:

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Delete error-causing bash
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: rm.exe "C:/WINDOWS/system32/bash.EXE"

    - name: Set path to bash for example runner
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        echo "SHELL_EXECUTABLE=C:\Program Files\Git\bin\bash.exe" >> $GITHUB_ENV

    - name: Get current week
      shell: bash
      id: date
      run: echo "::set-output name=week::$(date +'calendar-week-%W')"

    - name: Get current ZenML version
      shell: bash
      id: zenml
      run: echo "::set-output name=version::$(cat src/zenml/VERSION)"

    - uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv
      with:
        requirement_files: 'pyproject.toml'
        # The cache key used for the virtualenv consists of:
        # - a custom cache version token that can be used to manually invalidate
        # the cache if it is in some erroneous state
        # - the current calendar week
        # - the zenml version (to ensure full testing during a release)
        # - whether it contains integrations or not
        # - a hash of all the integration __init__.py files, which contain the
        # integration requirements
        custom_cache_key_element: ${{ inputs.cache_version }}-${{steps.date.outputs.week}}-${{steps.zenml.outputs.version}}-${{inputs.install_integrations}}-{{ hashFiles('src/zenml/integrations/*/__init__.py') }}

    - uses: syphar/restore-pip-download-cache@v1
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      with:
        requirement_files: 'pyproject.toml'
        # The cache key used for the pip download cache is the same as the one
        # for the virtualenv
        custom_cache_key_element: ${{ inputs.cache_version }}-${{steps.date.outputs.week}}-${{steps.zenml.outputs.version}}-${{inputs.install_integrations}}-{{ hashFiles('src/zenml/integrations/*/__init__.py') }}

    - name: Install ZenML
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      shell: bash
      run: |

        python -m pip install --upgrade pip
        pip install pip-tools
        # We use pip-compile to catch all the ZenML extras (pip install doesn't
        # have a similar feature)
        python -m piptools compile -v --all-extras -o zenml-requirements.txt \
          --resolver=backtracking pyproject.toml
        pip install -r zenml-requirements.txt
        pip install -e .

    - name: Install basic ZenML integrations
      if: steps.cache-virtualenv.outputs.cache-hit != 'true' and inputs.install_integrations == 'yes' 
      shell: bash
      run: |
        zenml integration export-requirements --output-file integration-requirements.txt --ignore-integration feast --ignore-integration label_studio --ignore-integration bentoml --ignore-integration seldon --ignore-integration kserve
        pip install -r integration-requirements.txt
        rm integration-requirements.txt

      # Refresh the ZenML installation if using a cached virtualenv or after
      # installing integrations
    - name: Refresh ZenML installation
      if: steps.cache-virtualenv.outputs.cache-hit == 'true' or inputs.install_integrations == 'yes'
      shell: bash
      run: |

        # We use pip-compile to catch all the extras (pip install doesn't have a
        # similar feature)
        python -m piptools compile -v --all-extras -o zenml-requirements.txt \
          --resolver=backtracking pyproject.toml
        pip install -r zenml-requirements.txt


        # install airflow requirements
        # pip install --upgrade "numpy>=1.21.0,<1.24.0"
        # pip install apache-airflow-providers-docker

    - name: Check Python environment
      shell: bash
      run: |
        zenml integration list
        pip list
        pip check || true
