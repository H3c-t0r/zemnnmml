name: "Install ZenML"
description: "Install ZenML, most integrations, loads/uploads cached venv and pip download cache if applicable"
inputs:
  cache_version:
    description: 'Value gets appended to the cache key and will therefore invalidate the cache if it changes'
    required: true
  python-version:
    description: 'Python version'
    type: string
    required: true
  os:
    description: 'OS'
    type: string
    required: true
  install_integrations:
    description: 'Install ZenML integrations'
    type: string
    required: false
    default: 'yes'

runs:
  using: "composite"
  steps:

    - name: Write cache version
      shell: bash
      run: echo $CACHE_VERSION >> cache_version
      env:
        CACHE_VERSION : ${{inputs.cache_version}}-${{inputs.install_integrations}}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip' # caching the pip download cache
        cache-dependency-path: |
          pyproject.toml
          cache_version

    - name: Delete error-causing bash
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: rm.exe "C:/WINDOWS/system32/bash.EXE"

    - name: Set path to bash for example runner
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        echo "SHELL_EXECUTABLE=C:\Program Files\Git\bin\bash.exe" >> $GITHUB_ENV

    - name: Install pip-tools
      shell: bash
      run: pip install pip-tools

    # We generate a set of frozen requirements to be used as a key for the
    # cached virtualenv. This ensures that the virtualenv cache is invalidated
    # if the requirements change.
    # Note that we explicitly avoid using pyproject.toml directly as a cache key
    # because it contains a lot of packages that are not pinned to a specific
    # version. Even when this file doesn't change, new versions of the packages
    # might be released and we want to make sure to always test against the
    # latest versions.
    #
    # Assumption: pip-compile computes the same list of packages that the
    # `pip install` command would compute.
    - name: Generate frozen requirements
      shell: bash
      run: |
        python -m piptools compile -v --all-extras -o zenml-requirements.txt \
          --resolver=backtracking pyproject.toml

    - uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv
      with:
        requirement_files: 'zenml-requirements.txt'
        custom_cache_key_element: ${{ inputs.cache_version }}-${{inputs.install_integrations}}

    # - uses: syphar/restore-pip-download-cache@v1
    #   if: steps.cache-virtualenv.outputs.cache-hit != 'true'
    #   with:
    #     requirement_files: 'zenml-requirements.txt'
    #     custom_cache_key_element: ${{ inputs.cache_version }}-${{inputs.install_integrations}}

    - name: Install ZenML
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r zenml-requirements.txt
        pip install -e .

    - name: Install basic ZenML integrations
      if: ${{ inputs.install_integrations == 'yes' }}
      shell: bash
      run: |
        zenml integration export-requirements --output-file requirements.txt --ignore-integration feast --ignore-integration label_studio --ignore-integration bentoml --ignore-integration seldon --ignore-integration kserve
        pip install -r requirements.txt
        rm requirements.txt

    - name: Install ZenML integrations - final
      if: ${{ inputs.install_integrations == 'yes' }}
      shell: bash
      run: |

        # re-install zenml requirements to be sure
        pip install -r zenml-requirements.txt
        # install airflow requirements
        pip install --upgrade "numpy>=1.21.0,<1.24.0"
        pip install apache-airflow-providers-docker
        # Version 4.2.1 raises: AttributeError: type object 'Draft7Validator' has no attribute 'FORMAT_CHECKER'
        pip install altair==4.2.0

    - name: Check Python environment
      run: |
        zenml integration list
        pip list
        pip check || true
