[
  {
    "name": "local",
    "type": "artifact_store",
    "config_schema": "{\"title\": \"LocalArtifactStoreConfig\", \"description\": \"Config class for the local artifact store.\\n\\nAttributes:\\n    path: The path to the local artifact store.\", \"type\": \"object\", \"properties\": {\"path\": {\"title\": \"Path\", \"default\": \"\", \"type\": \"string\"}}, \"additionalProperties\": false}",
    "source": "zenml.artifact_stores.local_artifact_store.LocalArtifactStoreFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/artifact_Store/local.svg"
  },
  {
    "name": "azure",
    "type": "artifact_store",
    "config_schema": "{\"title\": \"AzureArtifactStoreConfig\", \"description\": \"Configuration class for Azure Artifact Store.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"path\": {\"title\": \"Path\", \"type\": \"string\"}}, \"required\": [\"path\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.azure.flavors.azure_artifact_store_flavor.AzureArtifactStoreFlavor",
    "integration": "azure",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/artifact_Store/azure.png"
  },
  {
    "name": "gcp",
    "type": "artifact_store",
    "config_schema": "{\"title\": \"GCPArtifactStoreConfig\", \"description\": \"Configuration for GCP Artifact Store.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"path\": {\"title\": \"Path\", \"type\": \"string\"}}, \"required\": [\"path\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.gcp.flavors.gcp_artifact_store_flavor.GCPArtifactStoreFlavor",
    "integration": "gcp",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/artifact_Store/gcp.png"
  },
  {
    "name": "s3",
    "type": "artifact_store",
    "config_schema": "{\"title\": \"S3ArtifactStoreConfig\", \"description\": \"Configuration for the S3 Artifact Store.\\n\\nAll attributes of this class except `path` will be passed to the\\n`s3fs.S3FileSystem` initialization. See\\n[here](https://s3fs.readthedocs.io/en/latest/) for more information on how\\nto use those configuration options to connect to any S3-compatible storage.\\n\\nWhen you want to register an S3ArtifactStore from the CLI and need to pass\\n`client_kwargs`, `config_kwargs` or `s3_additional_kwargs`, you should pass\\nthem as a json string:\\n```\\nzenml artifact-store register my_s3_store --flavor=s3     --path=s3://my_bucket --client_kwargs='{\\\"endpoint_url\\\": \\\"http://my-s3-endpoint\\\"}'\\n```\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"path\": {\"title\": \"Path\", \"type\": \"string\"}, \"key\": {\"title\": \"Key\", \"sensitive\": true, \"type\": \"string\"}, \"secret\": {\"title\": \"Secret\", \"sensitive\": true, \"type\": \"string\"}, \"token\": {\"title\": \"Token\", \"sensitive\": true, \"type\": \"string\"}, \"client_kwargs\": {\"title\": \"Client Kwargs\", \"type\": \"object\"}, \"config_kwargs\": {\"title\": \"Config Kwargs\", \"type\": \"object\"}, \"s3_additional_kwargs\": {\"title\": \"S3 Additional Kwargs\", \"type\": \"object\"}}, \"required\": [\"path\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.s3.flavors.s3_artifact_store_flavor.S3ArtifactStoreFlavor",
    "integration": "s3",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/artifact_Store/aws.png"
  },
  {
    "name": "local",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"LocalOrchestratorConfig\", \"description\": \"Local orchestrator config.\", \"type\": \"object\", \"properties\": {}, \"additionalProperties\": false}",
    "source": "zenml.orchestrators.local.local_orchestrator.LocalOrchestratorFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/local.png"
  },
  {
    "name": "local_docker",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"LocalDockerOrchestratorConfig\", \"description\": \"Local Docker orchestrator config.\", \"type\": \"object\", \"properties\": {\"run_args\": {\"title\": \"Run Args\", \"default\": {}, \"type\": \"object\"}}, \"additionalProperties\": false}",
    "source": "zenml.orchestrators.local_docker.local_docker_orchestrator.LocalDockerOrchestratorFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/docker.png"
  },
  {
    "name": "airflow",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"AirflowOrchestratorConfig\", \"description\": \"Configuration for the Airflow orchestrator.\\n\\nAttributes:\\n    local: If the orchestrator is local or not. If this is True, will spin\\n        up a local Airflow server to run pipelines.\", \"type\": \"object\", \"properties\": {\"dag_output_dir\": {\"title\": \"Dag Output Dir\", \"type\": \"string\"}, \"dag_id\": {\"title\": \"Dag Id\", \"type\": \"string\"}, \"dag_tags\": {\"title\": \"Dag Tags\", \"default\": [], \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"dag_args\": {\"title\": \"Dag Args\", \"default\": {}, \"type\": \"object\"}, \"operator\": {\"title\": \"Operator\", \"default\": \"airflow.providers.docker.operators.docker.DockerOperator\", \"type\": \"string\"}, \"operator_args\": {\"title\": \"Operator Args\", \"default\": {}, \"type\": \"object\"}, \"custom_dag_generator\": {\"title\": \"Custom Dag Generator\", \"type\": \"string\"}, \"local\": {\"title\": \"Local\", \"default\": true, \"type\": \"boolean\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.airflow.flavors.airflow_orchestrator_flavor.AirflowOrchestratorFlavor",
    "integration": "airflow",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/airflow.png"
  },
  {
    "name": "sagemaker",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"SagemakerOrchestratorConfig\", \"description\": \"Config for the Sagemaker orchestrator.\\n\\nAttributes:\\n    synchronous: Whether to run the processing job synchronously or\\n        asynchronously. Defaults to False.\\n    execution_role: The IAM role to use for the pipeline.\\n    bucket: Name of the S3 bucket to use for storing artifacts\\n        from the job run. If not provided, a default bucket will be created\\n        based on the following format:\\n        \\\"sagemaker-{region}-{aws-account-id}\\\".\", \"type\": \"object\", \"properties\": {\"instance_type\": {\"title\": \"Instance Type\", \"default\": \"ml.t3.medium\", \"type\": \"string\"}, \"processor_role\": {\"title\": \"Processor Role\", \"type\": \"string\"}, \"volume_size_in_gb\": {\"title\": \"Volume Size In Gb\", \"default\": 30, \"type\": \"integer\"}, \"max_runtime_in_seconds\": {\"title\": \"Max Runtime In Seconds\", \"default\": 86400, \"type\": \"integer\"}, \"processor_tags\": {\"title\": \"Processor Tags\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"synchronous\": {\"title\": \"Synchronous\", \"default\": false, \"type\": \"boolean\"}, \"execution_role\": {\"title\": \"Execution Role\", \"type\": \"string\"}, \"bucket\": {\"title\": \"Bucket\", \"type\": \"string\"}}, \"required\": [\"execution_role\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.aws.flavors.sagemaker_orchestrator_flavor.SagemakerOrchestratorFlavor",
    "integration": "aws",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/sagemaker.png"
  },
  {
    "name": "vertex",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"VertexOrchestratorConfig\", \"description\": \"Configuration for the Vertex orchestrator.\\n\\nAttributes:\\n    project: GCP project name. If `None`, the project will be inferred from\\n        the environment.\\n    location: Name of GCP region where the pipeline job will be executed.\\n        Vertex AI Pipelines is available in the following regions:\\n        https://cloud.google.com/vertex-ai/docs/general/locations#feature\\n        -availability\\n    pipeline_root: a Cloud Storage URI that will be used by the Vertex AI\\n        Pipelines. If not provided but the artifact store in the stack used\\n        to execute the pipeline is a\\n        `zenml.integrations.gcp.artifact_stores.GCPArtifactStore`,\\n        then a subdirectory of the artifact store will be used.\\n    encryption_spec_key_name: The Cloud KMS resource identifier of the\\n        customer managed encryption key used to protect the job. Has the form:\\n        `projects/<PRJCT>/locations/<REGION>/keyRings/<KR>/cryptoKeys/<KEY>`\\n        . The key needs to be in the same region as where the compute\\n        resource is created.\\n    workload_service_account: the service account for workload run-as\\n        account. Users submitting jobs must have act-as permission on this\\n        run-as account.\\n        If not provided, the default service account will be used.\\n    network: the full name of the Compute Engine Network to which the job\\n        should be peered. For example, `projects/12345/global/networks/myVPC`\\n        If not provided, the job will not be peered with any network.\\n    cpu_limit: The maximum CPU limit for this operator. This string value\\n        can be a number (integer value for number of CPUs) as string,\\n        or a number followed by \\\"m\\\", which means 1/1000. You can specify\\n        at most 96 CPUs.\\n        (see. https://cloud.google.com/vertex-ai/docs/pipelines/machine-types)\\n    memory_limit: The maximum memory limit for this operator. This string\\n        value can be a number, or a number followed by \\\"K\\\" (kilobyte),\\n        \\\"M\\\" (megabyte), or \\\"G\\\" (gigabyte). At most 624GB is supported.\\n    gpu_limit: The GPU limit (positive number) for the operator.\\n        For more information about GPU resources, see:\\n        https://cloud.google.com/vertex-ai/docs/training/configure-compute#specifying_gpus\", \"type\": \"object\", \"properties\": {\"labels\": {\"title\": \"Labels\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"synchronous\": {\"title\": \"Synchronous\", \"default\": false, \"type\": \"boolean\"}, \"node_selector_constraint\": {\"title\": \"Node Selector Constraint\", \"type\": \"array\", \"minItems\": 2, \"maxItems\": 2, \"items\": [{\"type\": \"string\"}, {\"type\": \"string\"}]}, \"pod_settings\": {\"$ref\": \"#/definitions/KubernetesPodSettings\"}, \"service_account_path\": {\"title\": \"Service Account Path\", \"type\": \"string\"}, \"project\": {\"title\": \"Project\", \"type\": \"string\"}, \"location\": {\"title\": \"Location\", \"type\": \"string\"}, \"pipeline_root\": {\"title\": \"Pipeline Root\", \"type\": \"string\"}, \"encryption_spec_key_name\": {\"title\": \"Encryption Spec Key Name\", \"type\": \"string\"}, \"workload_service_account\": {\"title\": \"Workload Service Account\", \"type\": \"string\"}, \"network\": {\"title\": \"Network\", \"type\": \"string\"}, \"cpu_limit\": {\"title\": \"Cpu Limit\", \"type\": \"string\"}, \"memory_limit\": {\"title\": \"Memory Limit\", \"type\": \"string\"}, \"gpu_limit\": {\"title\": \"Gpu Limit\", \"type\": \"integer\"}}, \"required\": [\"location\"], \"additionalProperties\": false, \"definitions\": {\"KubernetesPodSettings\": {\"title\": \"KubernetesPodSettings\", \"description\": \"Kubernetes Pod settings.\\n\\nAttributes:\\n    node_selectors: Node selectors to apply to the pod.\\n    affinity: Affinity to apply to the pod.\\n    tolerations: Tolerations to apply to the pod.\", \"type\": \"object\", \"properties\": {\"node_selectors\": {\"title\": \"Node Selectors\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"affinity\": {\"title\": \"Affinity\", \"default\": {}, \"type\": \"object\"}, \"tolerations\": {\"title\": \"Tolerations\", \"default\": [], \"type\": \"array\", \"items\": {\"type\": \"object\"}}}}}}",
    "source": "zenml.integrations.gcp.flavors.vertex_orchestrator_flavor.VertexOrchestratorFlavor",
    "integration": "gcp",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/vertexai.png"
  },
  {
    "name": "github",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"GitHubActionsOrchestratorConfig\", \"description\": \"Configuration for the GitHub Actions orchestrator.\\n\\nAttributes:\\n    skip_dirty_repository_check: If `True`, this orchestrator will not\\n        raise an exception when trying to run a pipeline while there are\\n        still untracked/uncommitted files in the git repository.\\n    skip_github_repository_check: If `True`, the orchestrator will not check\\n        if your git repository is pointing to a GitHub remote.\\n    push: If `True`, this orchestrator will automatically commit and push\\n        the GitHub workflow file when running a pipeline. If `False`, the\\n        workflow file will be written to the correct location but needs to\\n        be committed and pushed manually.\", \"type\": \"object\", \"properties\": {\"skip_dirty_repository_check\": {\"title\": \"Skip Dirty Repository Check\", \"default\": false, \"type\": \"boolean\"}, \"skip_github_repository_check\": {\"title\": \"Skip Github Repository Check\", \"default\": false, \"type\": \"boolean\"}, \"push\": {\"title\": \"Push\", \"default\": false, \"type\": \"boolean\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.github.flavors.github_actions_orchestrator_flavor.GitHubActionsOrchestratorFlavor",
    "integration": "github",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/github.png"
  },
  {
    "name": "kubeflow",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"KubeflowOrchestratorConfig\", \"description\": \"Configuration for the Kubeflow orchestrator.\\n\\nAttributes:\\n    kubeflow_pipelines_ui_port: A local port to which the KFP UI will be\\n        forwarded.\\n    kubeflow_hostname: The hostname to use to talk to the Kubeflow Pipelines\\n        API. If not set, the hostname will be derived from the Kubernetes\\n        API proxy.\\n    kubeflow_namespace: The Kubernetes namespace in which Kubeflow\\n        Pipelines is deployed. Defaults to `kubeflow`.\\n    kubernetes_context: Optional name of a kubernetes context to run\\n        pipelines in. If not set, will try to spin up a local K3d cluster.\\n    skip_local_validations: If `True`, the local validations will be\\n        skipped.\\n    skip_cluster_provisioning: If `True`, the k3d cluster provisioning will\\n        be skipped.\\n    skip_ui_daemon_provisioning: If `True`, provisioning the KFP UI daemon\\n        will be skipped.\\n    container_registry_name: The name of the container registry stack\\n        component to use. If not specified, the container registry\\n        in the active stack is used.\", \"type\": \"object\", \"properties\": {\"synchronous\": {\"title\": \"Synchronous\", \"default\": false, \"type\": \"boolean\"}, \"timeout\": {\"title\": \"Timeout\", \"default\": 1200, \"type\": \"integer\"}, \"client_args\": {\"title\": \"Client Args\", \"default\": {}, \"type\": \"object\"}, \"client_username\": {\"title\": \"Client Username\", \"sensitive\": true, \"type\": \"string\"}, \"client_password\": {\"title\": \"Client Password\", \"sensitive\": true, \"type\": \"string\"}, \"user_namespace\": {\"title\": \"User Namespace\", \"type\": \"string\"}, \"node_selectors\": {\"title\": \"Node Selectors\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"node_affinity\": {\"title\": \"Node Affinity\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"pod_settings\": {\"$ref\": \"#/definitions/KubernetesPodSettings\"}, \"kubeflow_pipelines_ui_port\": {\"title\": \"Kubeflow Pipelines Ui Port\", \"default\": 8080, \"type\": \"integer\"}, \"kubeflow_hostname\": {\"title\": \"Kubeflow Hostname\", \"type\": \"string\"}, \"kubeflow_namespace\": {\"title\": \"Kubeflow Namespace\", \"default\": \"kubeflow\", \"type\": \"string\"}, \"kubernetes_context\": {\"title\": \"Kubernetes Context\", \"type\": \"string\"}, \"skip_local_validations\": {\"title\": \"Skip Local Validations\", \"default\": false, \"type\": \"boolean\"}, \"skip_cluster_provisioning\": {\"title\": \"Skip Cluster Provisioning\", \"default\": false, \"type\": \"boolean\"}, \"skip_ui_daemon_provisioning\": {\"title\": \"Skip Ui Daemon Provisioning\", \"default\": false, \"type\": \"boolean\"}, \"container_registry_name\": {\"title\": \"Container Registry Name\", \"type\": \"string\"}}, \"additionalProperties\": false, \"definitions\": {\"KubernetesPodSettings\": {\"title\": \"KubernetesPodSettings\", \"description\": \"Kubernetes Pod settings.\\n\\nAttributes:\\n    node_selectors: Node selectors to apply to the pod.\\n    affinity: Affinity to apply to the pod.\\n    tolerations: Tolerations to apply to the pod.\", \"type\": \"object\", \"properties\": {\"node_selectors\": {\"title\": \"Node Selectors\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"affinity\": {\"title\": \"Affinity\", \"default\": {}, \"type\": \"object\"}, \"tolerations\": {\"title\": \"Tolerations\", \"default\": [], \"type\": \"array\", \"items\": {\"type\": \"object\"}}}}}}",
    "source": "zenml.integrations.kubeflow.flavors.kubeflow_orchestrator_flavor.KubeflowOrchestratorFlavor",
    "integration": "kubeflow",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/kubeflow.png"
  },
  {
    "name": "kubernetes",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"KubernetesOrchestratorConfig\", \"description\": \"Configuration for the Kubernetes orchestrator.\\n\\nAttributes:\\n    kubernetes_context: Optional name of a Kubernetes context to run\\n        pipelines in. If not set, the current active context will be used.\\n        You can find the active context by running `kubectl config\\n        current-context`.\\n    kubernetes_namespace: Name of the Kubernetes namespace to be used.\\n        If not provided, `zenml` namespace will be used.\\n    skip_config_loading: If `True`, don't load the Kubernetes context and\\n        clients. This is only useful for unit testing.\", \"type\": \"object\", \"properties\": {\"synchronous\": {\"title\": \"Synchronous\", \"default\": false, \"type\": \"boolean\"}, \"timeout\": {\"title\": \"Timeout\", \"default\": 0, \"type\": \"integer\"}, \"pod_settings\": {\"$ref\": \"#/definitions/KubernetesPodSettings\"}, \"kubernetes_context\": {\"title\": \"Kubernetes Context\", \"type\": \"string\"}, \"kubernetes_namespace\": {\"title\": \"Kubernetes Namespace\", \"default\": \"zenml\", \"type\": \"string\"}, \"skip_config_loading\": {\"title\": \"Skip Config Loading\", \"default\": false, \"type\": \"boolean\"}}, \"additionalProperties\": false, \"definitions\": {\"KubernetesPodSettings\": {\"title\": \"KubernetesPodSettings\", \"description\": \"Kubernetes Pod settings.\\n\\nAttributes:\\n    node_selectors: Node selectors to apply to the pod.\\n    affinity: Affinity to apply to the pod.\\n    tolerations: Tolerations to apply to the pod.\", \"type\": \"object\", \"properties\": {\"node_selectors\": {\"title\": \"Node Selectors\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"affinity\": {\"title\": \"Affinity\", \"default\": {}, \"type\": \"object\"}, \"tolerations\": {\"title\": \"Tolerations\", \"default\": [], \"type\": \"array\", \"items\": {\"type\": \"object\"}}}}}}",
    "source": "zenml.integrations.kubernetes.flavors.kubernetes_orchestrator_flavor.KubernetesOrchestratorFlavor",
    "integration": "kubernetes",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/kubernetes.png"
  },
  {
    "name": "tekton",
    "type": "orchestrator",
    "config_schema": "{\"title\": \"TektonOrchestratorConfig\", \"description\": \"Configuration for the Tekton orchestrator.\\n\\nAttributes:\\n    kubernetes_context: Name of a kubernetes context to run\\n        pipelines in.\\n    kubernetes_namespace: Name of the kubernetes namespace in which the\\n        pods that run the pipeline steps should be running.\\n    tekton_ui_port: A local port to which the Tekton UI will be forwarded.\\n    skip_ui_daemon_provisioning: If `True`, provisioning the Tekton UI\\n        daemon will be skipped.\", \"type\": \"object\", \"properties\": {\"pod_settings\": {\"$ref\": \"#/definitions/KubernetesPodSettings\"}, \"kubernetes_context\": {\"title\": \"Kubernetes Context\", \"type\": \"string\"}, \"kubernetes_namespace\": {\"title\": \"Kubernetes Namespace\", \"default\": \"zenml\", \"type\": \"string\"}, \"tekton_ui_port\": {\"title\": \"Tekton Ui Port\", \"default\": 8080, \"type\": \"integer\"}, \"skip_ui_daemon_provisioning\": {\"title\": \"Skip Ui Daemon Provisioning\", \"default\": false, \"type\": \"boolean\"}}, \"required\": [\"kubernetes_context\"], \"additionalProperties\": false, \"definitions\": {\"KubernetesPodSettings\": {\"title\": \"KubernetesPodSettings\", \"description\": \"Kubernetes Pod settings.\\n\\nAttributes:\\n    node_selectors: Node selectors to apply to the pod.\\n    affinity: Affinity to apply to the pod.\\n    tolerations: Tolerations to apply to the pod.\", \"type\": \"object\", \"properties\": {\"node_selectors\": {\"title\": \"Node Selectors\", \"default\": {}, \"type\": \"object\", \"additionalProperties\": {\"type\": \"string\"}}, \"affinity\": {\"title\": \"Affinity\", \"default\": {}, \"type\": \"object\"}, \"tolerations\": {\"title\": \"Tolerations\", \"default\": [], \"type\": \"array\", \"items\": {\"type\": \"object\"}}}}}}",
    "source": "zenml.integrations.tekton.flavors.tekton_orchestrator_flavor.TektonOrchestratorFlavor",
    "integration": "tekton",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/orchestrator/tekton.png"
  },
  {
    "name": "default",
    "type": "container_registry",
    "config_schema": "{\"title\": \"BaseContainerRegistryConfig\", \"description\": \"Base config for a container registry.\\n\\nAttributes:\\n    uri: The URI of the container registry.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"uri\": {\"title\": \"Uri\", \"type\": \"string\"}}, \"required\": [\"uri\"], \"additionalProperties\": false}",
    "source": "zenml.container_registries.default_container_registry.DefaultContainerRegistryFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/container_registry/local.svg"
  },
  {
    "name": "azure",
    "type": "container_registry",
    "config_schema": "{\"title\": \"BaseContainerRegistryConfig\", \"description\": \"Base config for a container registry.\\n\\nAttributes:\\n    uri: The URI of the container registry.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"uri\": {\"title\": \"Uri\", \"type\": \"string\"}}, \"required\": [\"uri\"], \"additionalProperties\": false}",
    "source": "zenml.container_registries.azure_container_registry.AzureContainerRegistryFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/container_registry/azure.png"
  },
  {
    "name": "dockerhub",
    "type": "container_registry",
    "config_schema": "{\"title\": \"BaseContainerRegistryConfig\", \"description\": \"Base config for a container registry.\\n\\nAttributes:\\n    uri: The URI of the container registry.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"uri\": {\"title\": \"Uri\", \"type\": \"string\"}}, \"required\": [\"uri\"], \"additionalProperties\": false}",
    "source": "zenml.container_registries.dockerhub_container_registry.DockerHubContainerRegistryFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/container_registry/docker.png"
  },
  {
    "name": "gcp",
    "type": "container_registry",
    "config_schema": "{\"title\": \"BaseContainerRegistryConfig\", \"description\": \"Base config for a container registry.\\n\\nAttributes:\\n    uri: The URI of the container registry.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"uri\": {\"title\": \"Uri\", \"type\": \"string\"}}, \"required\": [\"uri\"], \"additionalProperties\": false}",
    "source": "zenml.container_registries.gcp_container_registry.GCPContainerRegistryFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/container_registry/gcp.png"
  },
  {
    "name": "github",
    "type": "container_registry",
    "config_schema": "{\"title\": \"BaseContainerRegistryConfig\", \"description\": \"Base config for a container registry.\\n\\nAttributes:\\n    uri: The URI of the container registry.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"uri\": {\"title\": \"Uri\", \"type\": \"string\"}}, \"required\": [\"uri\"], \"additionalProperties\": false}",
    "source": "zenml.container_registries.github_container_registry.GitHubContainerRegistryFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/container_registry/github.png"
  },
  {
    "name": "aws",
    "type": "container_registry",
    "config_schema": "{\"title\": \"AWSContainerRegistryConfig\", \"description\": \"Configuration for AWS Container Registry.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"uri\": {\"title\": \"Uri\", \"type\": \"string\"}}, \"required\": [\"uri\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.aws.flavors.aws_container_registry_flavor.AWSContainerRegistryFlavor",
    "integration": "aws",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/container_registry/aws.png"
  },
  {
    "name": "local",
    "type": "secrets_manager",
    "config_schema": "{\"title\": \"LocalSecretsManagerConfig\", \"description\": \"Configuration for the local secrets manager.\\n\\nAttributes:\\n    secrets_file: The path to the secrets file.\", \"type\": \"object\", \"properties\": {\"scope\": {\"default\": \"component\", \"allOf\": [{\"$ref\": \"#/definitions/SecretsManagerScope\"}]}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"secrets_file\": {\"title\": \"Secrets File\", \"default\": \"\", \"type\": \"string\"}}, \"additionalProperties\": false, \"definitions\": {\"SecretsManagerScope\": {\"title\": \"SecretsManagerScope\", \"description\": \"Secrets Manager scope enum.\", \"enum\": [\"none\", \"global\", \"component\", \"namespace\"], \"type\": \"string\"}}}",
    "source": "zenml.secrets_managers.local.local_secrets_manager.LocalSecretsManagerFlavor",
    "integration": "built-in",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/secrets_managers/local.svg"
  },
  {
    "name": "aws",
    "type": "secrets_manager",
    "config_schema": "{\"title\": \"AWSSecretsManagerConfig\", \"description\": \"Configuration for the AWS Secrets Manager.\\n\\nAttributes:\\n    region_name: The region name of the AWS Secrets Manager.\", \"type\": \"object\", \"properties\": {\"scope\": {\"default\": \"component\", \"allOf\": [{\"$ref\": \"#/definitions/SecretsManagerScope\"}]}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"region_name\": {\"title\": \"Region Name\", \"type\": \"string\"}}, \"required\": [\"region_name\"], \"additionalProperties\": false, \"definitions\": {\"SecretsManagerScope\": {\"title\": \"SecretsManagerScope\", \"description\": \"Secrets Manager scope enum.\", \"enum\": [\"none\", \"global\", \"component\", \"namespace\"], \"type\": \"string\"}}}",
    "source": "zenml.integrations.aws.flavors.aws_secrets_manager_flavor.AWSSecretsManagerFlavor",
    "integration": "aws",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/secrets_managers/aws.png"
  },
  {
    "name": "azure",
    "type": "secrets_manager",
    "config_schema": "{\"title\": \"AzureSecretsManagerConfig\", \"description\": \"Configuration for the Azure Secrets Manager.\\n\\nAttributes:\\n    key_vault_name: Name of an Azure Key Vault that this secrets manager\\n        will use to store secrets.\", \"type\": \"object\", \"properties\": {\"scope\": {\"default\": \"component\", \"allOf\": [{\"$ref\": \"#/definitions/SecretsManagerScope\"}]}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"key_vault_name\": {\"title\": \"Key Vault Name\", \"type\": \"string\"}}, \"required\": [\"key_vault_name\"], \"additionalProperties\": false, \"definitions\": {\"SecretsManagerScope\": {\"title\": \"SecretsManagerScope\", \"description\": \"Secrets Manager scope enum.\", \"enum\": [\"none\", \"global\", \"component\", \"namespace\"], \"type\": \"string\"}}}",
    "source": "zenml.integrations.azure.flavors.azure_secrets_manager_flavor.AzureSecretsManagerFlavor",
    "integration": "azure",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/secrets_managers/azure.png"
  },
  {
    "name": "gcp",
    "type": "secrets_manager",
    "config_schema": "{\"title\": \"GCPSecretsManagerConfig\", \"description\": \"Configuration for the GCP Secrets Manager.\\n\\nAttributes:\\n    project_id: This is necessary to access the correct GCP project.\\n        The project_id of your GCP project space that contains the Secret\\n        Manager.\", \"type\": \"object\", \"properties\": {\"scope\": {\"default\": \"component\", \"allOf\": [{\"$ref\": \"#/definitions/SecretsManagerScope\"}]}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"project_id\": {\"title\": \"Project Id\", \"type\": \"string\"}}, \"required\": [\"project_id\"], \"additionalProperties\": false, \"definitions\": {\"SecretsManagerScope\": {\"title\": \"SecretsManagerScope\", \"description\": \"Secrets Manager scope enum.\", \"enum\": [\"none\", \"global\", \"component\", \"namespace\"], \"type\": \"string\"}}}",
    "source": "zenml.integrations.gcp.flavors.gcp_secrets_manager_flavor.GCPSecretsManagerFlavor",
    "integration": "gcp",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/model_deployer/bentoml.png"
  },
  {
    "name": "github",
    "type": "secrets_manager",
    "config_schema": "{\"title\": \"GitHubSecretsManagerConfig\", \"description\": \"The configuration for the GitHub Secrets Manager.\\n\\nAttributes:\\n    owner: The owner (either individual or organization) of the repository.\\n    repository: Name of the GitHub repository.\", \"type\": \"object\", \"properties\": {\"scope\": {\"default\": \"component\", \"allOf\": [{\"$ref\": \"#/definitions/SecretsManagerScope\"}]}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"owner\": {\"title\": \"Owner\", \"type\": \"string\"}, \"repository\": {\"title\": \"Repository\", \"type\": \"string\"}}, \"required\": [\"owner\", \"repository\"], \"additionalProperties\": false, \"definitions\": {\"SecretsManagerScope\": {\"title\": \"SecretsManagerScope\", \"description\": \"Secrets Manager scope enum.\", \"enum\": [\"none\", \"global\", \"component\", \"namespace\"], \"type\": \"string\"}}}",
    "source": "zenml.integrations.github.flavors.github_secrets_manager_flavor.GitHubSecretsManagerFlavor",
    "integration": "github",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/secrets_managers/github.png"
  },
  {
    "name": "vault",
    "type": "secrets_manager",
    "config_schema": "{\"title\": \"VaultSecretsManagerConfig\", \"description\": \"Configuration for the Vault Secrets Manager.\\n\\nAttributes:\\n    url: The url of the Vault server.\\n    token: The token to use to authenticate with Vault.\\n    cert: The path to the certificate to use to authenticate with Vault.\\n    verify: Whether to verify the certificate or not.\\n    mount_point: The mount point of the secrets manager.\", \"type\": \"object\", \"properties\": {\"scope\": {\"default\": \"component\", \"allOf\": [{\"$ref\": \"#/definitions/SecretsManagerScope\"}]}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"url\": {\"title\": \"Url\", \"type\": \"string\"}, \"token\": {\"title\": \"Token\", \"type\": \"string\"}, \"mount_point\": {\"title\": \"Mount Point\", \"type\": \"string\"}, \"cert\": {\"title\": \"Cert\", \"type\": \"string\"}, \"verify\": {\"title\": \"Verify\", \"type\": \"string\"}}, \"required\": [\"url\", \"token\", \"mount_point\"], \"additionalProperties\": false, \"definitions\": {\"SecretsManagerScope\": {\"title\": \"SecretsManagerScope\", \"description\": \"Secrets Manager scope enum.\", \"enum\": [\"none\", \"global\", \"component\", \"namespace\"], \"type\": \"string\"}}}",
    "source": "zenml.integrations.vault.flavors.vault_secrets_manager_flavor.VaultSecretsManagerFlavor",
    "integration": "vault",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/secrets_managers/vault.png"
  },
  {
    "name": "sagemaker",
    "type": "step_operator",
    "config_schema": "{\"title\": \"SagemakerStepOperatorConfig\", \"description\": \"Config for the Sagemaker step operator.\\n\\nAttributes:\\n    role: The role that has to be assigned to the jobs which are\\n        running in Sagemaker.\\n    bucket: Name of the S3 bucket to use for storing artifacts\\n        from the job run. If not provided, a default bucket will be created\\n        based on the following format: \\\"sagemaker-{region}-{aws-account-id}\\\".\", \"type\": \"object\", \"properties\": {\"instance_type\": {\"title\": \"Instance Type\", \"type\": \"string\"}, \"experiment_name\": {\"title\": \"Experiment Name\", \"type\": \"string\"}, \"role\": {\"title\": \"Role\", \"type\": \"string\"}, \"bucket\": {\"title\": \"Bucket\", \"type\": \"string\"}}, \"required\": [\"role\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.aws.flavors.sagemaker_step_operator_flavor.SagemakerStepOperatorFlavor",
    "integration": "aws",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/step_operator/sagemaker.png"
  },
  {
    "name": "azureml",
    "type": "step_operator",
    "config_schema": "{\"title\": \"AzureMLStepOperatorConfig\", \"description\": \"Config for the AzureML step operator.\\n\\nAttributes:\\n    subscription_id: The Azure account's subscription ID\\n    resource_group: The resource group to which the AzureML workspace\\n        is deployed.\\n    workspace_name: The name of the AzureML Workspace.\\n    compute_target_name: The name of the configured ComputeTarget.\\n        An instance of it has to be created on the portal if it doesn't\\n        exist already.\\n    tenant_id: The Azure Tenant ID.\\n    service_principal_id: The ID for the service principal that is created\\n        to allow apps to access secure resources.\\n    service_principal_password: Password for the service principal.\", \"type\": \"object\", \"properties\": {\"environment_name\": {\"title\": \"Environment Name\", \"type\": \"string\"}, \"subscription_id\": {\"title\": \"Subscription Id\", \"type\": \"string\"}, \"resource_group\": {\"title\": \"Resource Group\", \"type\": \"string\"}, \"workspace_name\": {\"title\": \"Workspace Name\", \"type\": \"string\"}, \"compute_target_name\": {\"title\": \"Compute Target Name\", \"type\": \"string\"}, \"tenant_id\": {\"title\": \"Tenant Id\", \"sensitive\": true, \"type\": \"string\"}, \"service_principal_id\": {\"title\": \"Service Principal Id\", \"sensitive\": true, \"type\": \"string\"}, \"service_principal_password\": {\"title\": \"Service Principal Password\", \"sensitive\": true, \"type\": \"string\"}}, \"required\": [\"subscription_id\", \"resource_group\", \"workspace_name\", \"compute_target_name\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.azure.flavors.azureml_step_operator_flavor.AzureMLStepOperatorFlavor",
    "integration": "azure",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/step_operator/azureml.png"
  },
  {
    "name": "vertex",
    "type": "step_operator",
    "config_schema": "{\"title\": \"VertexStepOperatorConfig\", \"description\": \"Configuration for the Vertex step operator.\\n\\nAttributes:\\n    region: Region name, e.g., `europe-west1`.\\n    project: GCP project name. If left None, inferred from the\\n        environment.\\n    encryption_spec_key_name: Encryption spec key name.\", \"type\": \"object\", \"properties\": {\"accelerator_type\": {\"title\": \"Accelerator Type\", \"type\": \"string\"}, \"accelerator_count\": {\"title\": \"Accelerator Count\", \"default\": 0, \"type\": \"integer\"}, \"machine_type\": {\"title\": \"Machine Type\", \"default\": \"n1-standard-4\", \"type\": \"string\"}, \"service_account_path\": {\"title\": \"Service Account Path\", \"type\": \"string\"}, \"region\": {\"title\": \"Region\", \"type\": \"string\"}, \"project\": {\"title\": \"Project\", \"type\": \"string\"}, \"encryption_spec_key_name\": {\"title\": \"Encryption Spec Key Name\", \"type\": \"string\"}}, \"required\": [\"region\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.gcp.flavors.vertex_step_operator_flavor.VertexStepOperatorFlavor",
    "integration": "gcp",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/step_operator/vertexai.png"
  },
  {
    "name": "spark-kubernetes",
    "type": "step_operator",
    "config_schema": "{\"title\": \"KubernetesSparkStepOperatorConfig\", \"description\": \"Config for the Kubernetes Spark step operator.\\n\\nAttributes:\\n    namespace: the namespace under which the driver and executor pods\\n        will run.\\n    service_account: the service account that will be used by various Spark\\n        components (to create and watch the pods).\", \"type\": \"object\", \"properties\": {\"deploy_mode\": {\"title\": \"Deploy Mode\", \"default\": \"cluster\", \"type\": \"string\"}, \"submit_kwargs\": {\"title\": \"Submit Kwargs\", \"type\": \"object\"}, \"master\": {\"title\": \"Master\", \"type\": \"string\"}, \"namespace\": {\"title\": \"Namespace\", \"type\": \"string\"}, \"service_account\": {\"title\": \"Service Account\", \"type\": \"string\"}}, \"required\": [\"master\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.spark.flavors.spark_on_kubernetes_step_operator_flavor.KubernetesSparkStepOperatorFlavor",
    "integration": "spark",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/step_operator/spark.png"
  },
  {
    "name": "bentoml",
    "type": "model_deployer",
    "config_schema": "{\"title\": \"BentoMLModelDeployerConfig\", \"description\": \"Configuration for the BentoMLModelDeployer.\", \"type\": \"object\", \"properties\": {\"service_path\": {\"title\": \"Service Path\", \"default\": \"\", \"type\": \"string\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.bentoml.flavors.bentoml_model_deployer_flavor.BentoMLModelDeployerFlavor",
    "integration": "bentoml",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/model_deployer/bentoml.png"
  },
  {
    "name": "kserve",
    "type": "model_deployer",
    "config_schema": "{\"title\": \"KServeModelDeployerConfig\", \"description\": \"Configuration for the KServeModelDeployer.\\n\\nAttributes:\\n    kubernetes_context: the Kubernetes context to use to contact the remote\\n        KServe installation. If not specified, the current\\n        configuration is used. Depending on where the KServe model deployer\\n        is being used, this can be either a locally active context or an\\n        in-cluster Kubernetes configuration (if running inside a pod).\\n    kubernetes_namespace: the Kubernetes namespace where the KServe\\n        inference service CRDs are provisioned and managed by ZenML. If not\\n        specified, the namespace set in the current configuration is used.\\n        Depending on where the KServe model deployer is being used, this can\\n        be either the current namespace configured in the locally active\\n        context or the namespace in the context of which the pod is running\\n        (if running inside a pod).\\n    base_url: the base URL of the Kubernetes ingress used to expose the\\n        KServe inference services.\\n    secret: the name of the secret containing the credentials for the\\n        KServe inference services.\", \"type\": \"object\", \"properties\": {\"kubernetes_context\": {\"title\": \"Kubernetes Context\", \"type\": \"string\"}, \"kubernetes_namespace\": {\"title\": \"Kubernetes Namespace\", \"type\": \"string\"}, \"base_url\": {\"title\": \"Base Url\", \"type\": \"string\"}, \"secret\": {\"title\": \"Secret\", \"type\": \"string\"}, \"custom_domain\": {\"title\": \"Custom Domain\", \"type\": \"string\"}}, \"required\": [\"base_url\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.kserve.flavors.kserve_model_deployer_flavor.KServeModelDeployerFlavor",
    "integration": "kserve",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/model_deployer/kserve.png"
  },
  {
    "name": "mlflow",
    "type": "model_deployer",
    "config_schema": "{\"title\": \"MLFlowModelDeployerConfig\", \"description\": \"Configuration for the MLflow model deployer.\\n\\nAttributes:\\n    service_path: the path where the local MLflow deployment service\\n        configuration, PID and log files are stored.\", \"type\": \"object\", \"properties\": {\"service_path\": {\"title\": \"Service Path\", \"default\": \"\", \"type\": \"string\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.mlflow.flavors.mlflow_model_deployer_flavor.MLFlowModelDeployerFlavor",
    "integration": "mlflow",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/model_deployer/mlflow.png"
  },
  {
    "name": "seldon",
    "type": "model_deployer",
    "config_schema": "{\"title\": \"SeldonModelDeployerConfig\", \"description\": \"Config for the Seldon Model Deployer.\\n\\nAttributes:\\n    kubernetes_context: the Kubernetes context to use to contact the remote\\n        Seldon Core installation. If not specified, the current\\n        configuration is used. Depending on where the Seldon model deployer\\n        is being used, this can be either a locally active context or an\\n        in-cluster Kubernetes configuration (if running inside a pod).\\n    kubernetes_namespace: the Kubernetes namespace where the Seldon Core\\n        deployment servers are provisioned and managed by ZenML. If not\\n        specified, the namespace set in the current configuration is used.\\n        Depending on where the Seldon model deployer is being used, this can\\n        be either the current namespace configured in the locally active\\n        context or the namespace in the context of which the pod is running\\n        (if running inside a pod).\\n    base_url: the base URL of the Kubernetes ingress used to expose the\\n        Seldon Core deployment servers.\\n    secret: the name of a ZenML secret containing the credentials used by\\n        Seldon Core storage initializers to authenticate to the Artifact\\n        Store (i.e. the storage backend where models are stored - see\\n        https://docs.seldon.io/projects/seldon-core/en/latest/servers/overview.html#handling-credentials).\", \"type\": \"object\", \"properties\": {\"kubernetes_context\": {\"title\": \"Kubernetes Context\", \"type\": \"string\"}, \"kubernetes_namespace\": {\"title\": \"Kubernetes Namespace\", \"type\": \"string\"}, \"base_url\": {\"title\": \"Base Url\", \"type\": \"string\"}, \"secret\": {\"title\": \"Secret\", \"type\": \"string\"}}, \"required\": [\"base_url\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.seldon.flavors.seldon_model_deployer_flavor.SeldonModelDeployerFlavor",
    "integration": "seldon",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/model_deployer/seldon.png"
  },
  {
    "name": "deepchecks",
    "type": "data_validator",
    "config_schema": "{\"title\": \"BaseDataValidatorConfig\", \"description\": \"Base config for all data validators.\", \"type\": \"object\", \"properties\": {}, \"additionalProperties\": false}",
    "source": "zenml.integrations.deepchecks.flavors.deepchecks_data_validator_flavor.DeepchecksDataValidatorFlavor",
    "integration": "deepchecks",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/data_validator/deepchecks.png"
  },
  {
    "name": "evidently",
    "type": "data_validator",
    "config_schema": "{\"title\": \"BaseDataValidatorConfig\", \"description\": \"Base config for all data validators.\", \"type\": \"object\", \"properties\": {}, \"additionalProperties\": false}",
    "source": "zenml.integrations.evidently.flavors.evidently_data_validator_flavor.EvidentlyDataValidatorFlavor",
    "integration": "evidently",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/data_validator/evidently.png"
  },
  {
    "name": "great_expectations",
    "type": "data_validator",
    "config_schema": "{\"title\": \"GreatExpectationsDataValidatorConfig\", \"description\": \"Config for the Great Expectations data validator.\\n\\nAttributes:\\n    context_root_dir: location of an already initialized Great Expectations\\n        data context. If configured, the data validator will only be usable\\n        with local orchestrators.\\n    context_config: in-line Great Expectations data context configuration.\\n    configure_zenml_stores: if set, ZenML will automatically configure\\n        stores that use the Artifact Store as a backend. If neither\\n        `context_root_dir` nor `context_config` are set, this is the default\\n        behavior.\\n    configure_local_docs: configure a local data docs site where Great\\n        Expectations docs are generated and can be visualized locally.\", \"type\": \"object\", \"properties\": {\"context_root_dir\": {\"title\": \"Context Root Dir\", \"type\": \"string\"}, \"context_config\": {\"title\": \"Context Config\", \"type\": \"object\"}, \"configure_zenml_stores\": {\"title\": \"Configure Zenml Stores\", \"default\": false, \"type\": \"boolean\"}, \"configure_local_docs\": {\"title\": \"Configure Local Docs\", \"default\": true, \"type\": \"boolean\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.great_expectations.flavors.great_expectations_data_validator_flavor.GreatExpectationsDataValidatorFlavor",
    "integration": "great_expectations",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/data_validator/greatexpectations.jpeg"
  },
  {
    "name": "whylogs",
    "type": "data_validator",
    "config_schema": "{\"title\": \"WhylogsDataValidatorConfig\", \"description\": \"Config for the whylogs data validator.\", \"type\": \"object\", \"properties\": {\"enable_whylabs\": {\"title\": \"Enable Whylabs\", \"default\": false, \"type\": \"boolean\"}, \"dataset_id\": {\"title\": \"Dataset Id\", \"type\": \"string\"}, \"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.whylogs.flavors.whylogs_data_validator_flavor.WhylogsDataValidatorFlavor",
    "integration": "whylogs",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/data_validator/whylogs.png"
  },
  {
    "name": "feast",
    "type": "feature_store",
    "config_schema": "{\"title\": \"FeastFeatureStoreConfig\", \"description\": \"Config for Feast feature store.\", \"type\": \"object\", \"properties\": {\"online_host\": {\"title\": \"Online Host\", \"default\": \"localhost\", \"type\": \"string\"}, \"online_port\": {\"title\": \"Online Port\", \"default\": 6379, \"type\": \"integer\"}, \"feast_repo\": {\"title\": \"Feast Repo\", \"type\": \"string\"}}, \"required\": [\"feast_repo\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.feast.flavors.feast_feature_store_flavor.FeastFeatureStoreFlavor",
    "integration": "feast",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/feature_store/feast.png"
  },
  {
    "name": "label_studio",
    "type": "annotator",
    "config_schema": "{\"title\": \"LabelStudioAnnotatorConfig\", \"description\": \"Config for the Label Studio annotator.\\n\\nAttributes:\\n    instance_url: URL of the Label Studio instance.\\n    port: The port to use for the annotation interface.\", \"type\": \"object\", \"properties\": {\"authentication_secret\": {\"title\": \"Authentication Secret\", \"type\": \"string\"}, \"instance_url\": {\"title\": \"Instance Url\", \"default\": \"http://localhost\", \"type\": \"string\"}, \"port\": {\"title\": \"Port\", \"default\": 8093, \"type\": \"integer\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.label_studio.flavors.label_studio_annotator_flavor.LabelStudioAnnotatorFlavor",
    "integration": "label_studio",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/annotator/label_studio.png"
  },
  {
    "name": "mlflow",
    "type": "experiment_tracker",
    "config_schema": "{\"title\": \"MLFlowExperimentTrackerConfig\", \"description\": \"Config for the MLflow experiment tracker.\\n\\nAttributes:\\n    tracking_uri: The uri of the mlflow tracking server. If no uri is set,\\n        your stack must contain a `LocalArtifactStore` and ZenML will\\n        point MLflow to a subdirectory of your artifact store instead.\\n    tracking_username: Username for authenticating with the MLflow\\n        tracking server. When a remote tracking uri is specified,\\n        either `tracking_token` or `tracking_username` and\\n        `tracking_password` must be specified.\\n    tracking_password: Password for authenticating with the MLflow\\n        tracking server. When a remote tracking uri is specified,\\n        either `tracking_token` or `tracking_username` and\\n        `tracking_password` must be specified.\\n    tracking_token: Token for authenticating with the MLflow\\n        tracking server. When a remote tracking uri is specified,\\n        either `tracking_token` or `tracking_username` and\\n        `tracking_password` must be specified.\\n    tracking_insecure_tls: Skips verification of TLS connection to the\\n        MLflow tracking server if set to `True`.\\n    databricks_host: The host of the Databricks workspace with the MLflow\\n        managed server to connect to. This is only required if\\n        `tracking_uri` value is set to `\\\"databricks\\\"`.\", \"type\": \"object\", \"properties\": {\"experiment_name\": {\"title\": \"Experiment Name\", \"type\": \"string\"}, \"nested\": {\"title\": \"Nested\", \"default\": false, \"type\": \"boolean\"}, \"tags\": {\"title\": \"Tags\", \"default\": {}, \"type\": \"object\"}, \"tracking_uri\": {\"title\": \"Tracking Uri\", \"type\": \"string\"}, \"tracking_username\": {\"title\": \"Tracking Username\", \"sensitive\": true, \"type\": \"string\"}, \"tracking_password\": {\"title\": \"Tracking Password\", \"sensitive\": true, \"type\": \"string\"}, \"tracking_token\": {\"title\": \"Tracking Token\", \"sensitive\": true, \"type\": \"string\"}, \"tracking_insecure_tls\": {\"title\": \"Tracking Insecure Tls\", \"default\": false, \"type\": \"boolean\"}, \"databricks_host\": {\"title\": \"Databricks Host\", \"type\": \"string\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.mlflow.flavors.mlflow_experiment_tracker_flavor.MLFlowExperimentTrackerFlavor",
    "integration": "mlflow",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/experiment_tracker/mlflow.png"
  },
  {
    "name": "neptune",
    "type": "experiment_tracker",
    "config_schema": "{\"title\": \"NeptuneExperimentTrackerConfig\", \"description\": \"Config for the Neptune experiment tracker.\\n\\nIf attributes are left as None, the neptune.init_run() method\\nwill try to find the relevant values in the environment\\n\\nAttributes:\\n    project: name of the Neptune project you want to log the metadata to\\n    api_token: your Neptune API token\", \"type\": \"object\", \"properties\": {\"project\": {\"title\": \"Project\", \"type\": \"string\"}, \"api_token\": {\"title\": \"Api Token\", \"sensitive\": true, \"type\": \"string\"}}, \"additionalProperties\": false}",
    "source": "zenml.integrations.neptune.flavors.neptune_experiment_tracker_flavor.NeptuneExperimentTrackerFlavor",
    "integration": "neptune",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/experiment_tracker/neptune.png"
  },
  {
    "name": "wandb",
    "type": "experiment_tracker",
    "config_schema": "{\"title\": \"WandbExperimentTrackerConfig\", \"description\": \"Config for the Wandb experiment tracker.\\n\\nAttributes:\\n    entity: Name of an existing wandb entity.\\n    project_name: Name of an existing wandb project to log to.\\n    api_key: API key to should be authorized to log to the configured wandb\\n        entity and project.\", \"type\": \"object\", \"properties\": {\"run_name\": {\"title\": \"Run Name\", \"type\": \"string\"}, \"tags\": {\"title\": \"Tags\", \"default\": [], \"type\": \"array\", \"items\": {\"type\": \"string\"}}, \"settings\": {\"title\": \"Settings\", \"default\": {}, \"type\": \"object\"}, \"api_key\": {\"title\": \"Api Key\", \"sensitive\": true, \"type\": \"string\"}, \"entity\": {\"title\": \"Entity\", \"type\": \"string\"}, \"project_name\": {\"title\": \"Project Name\", \"type\": \"string\"}}, \"required\": [\"api_key\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.wandb.flavors.wandb_experiment_tracker_flavor.WandbExperimentTrackerFlavor",
    "integration": "wandb",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/experiment_tracker/wandb.png"
  },
  {
    "name": "slack",
    "type": "alerter",
    "config_schema": "{\"title\": \"SlackAlerterConfig\", \"description\": \"Slack alerter config.\\n\\nAttributes:\\n    slack_token: The Slack token tied to the Slack account to be used.\\n    default_slack_channel_id: The ID of the Slack channel to use for\\n        communication if no channel ID is provided in the step config.\", \"type\": \"object\", \"properties\": {\"slack_token\": {\"title\": \"Slack Token\", \"sensitive\": true, \"type\": \"string\"}, \"default_slack_channel_id\": {\"title\": \"Default Slack Channel Id\", \"type\": \"string\"}}, \"required\": [\"slack_token\"], \"additionalProperties\": false}",
    "source": "zenml.integrations.slack.flavors.slack_alerter_flavor.SlackAlerterFlavor",
    "integration": "slack",
    "logo_url": "https://public-flavor-logos.s3.eu-central-1.amazonaws.com/alerter/slack"
  }
]