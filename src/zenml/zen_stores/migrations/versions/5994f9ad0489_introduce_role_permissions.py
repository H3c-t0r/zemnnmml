"""Introduce role permissions [5994f9ad0489].

Revision ID: 5994f9ad0489
Revises: c1b18cec3a48
Create Date: 2022-10-25 23:52:25.935344

"""
import sqlmodel
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5994f9ad0489'
down_revision = 'c1b18cec3a48'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Upgrade database schema and/or data, creating a new revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permissionschema',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rolepermissionsschema',
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['roleschema.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['permissionschema.id'], ),
    sa.PrimaryKeyConstraint('permission_id', 'role_id')
    )
    # get metadata from current connection
    meta = sa.MetaData(bind=op.get_bind())

    # pass in tuple with tables we want to reflect, otherwise whole database will get reflected
    meta.reflect(only=('permissionschema',))

    op.bulk_insert(
        sa.Table('permissionschema', meta),
        [
            {'id': 0,
             'name': 'read'},
            {'id': 1,
             'name': 'write'},
        ]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema and/or data back to the previous revision."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rolepermissionsschema')
    op.drop_table('permissionschema')
    # ### end Alembic commands ###
